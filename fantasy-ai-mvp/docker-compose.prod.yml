version: '3.8'

services:
  # Main web application
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - ODDS_API_KEY=${ODDS_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    networks:
      - fantasy-ai

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - fantasy-ai

  # PostgreSQL database (backup for Supabase)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=fantasy
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=fantasy_ai
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - fantasy-ai

  # ML Processing Service
  ml-worker:
    build:
      context: .
      dockerfile: Dockerfile.ml
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TENSORFLOW_GPU=true
    deploy:
      replicas: 4
    restart: unless-stopped
    networks:
      - fantasy-ai

  # Data Collection Service
  data-collector:
    build:
      context: .
      dockerfile: Dockerfile.collector
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - OPENWEATHER_API_KEY=${OPENWEATHER_API_KEY}
      - ODDS_API_KEY=${ODDS_API_KEY}
      - NEWS_API_KEY=${NEWS_API_KEY}
      - REDIS_URL=redis://redis:6379
    restart: unless-stopped
    networks:
      - fantasy-ai

  # WebSocket Service
  websocket:
    build:
      context: .
      dockerfile: Dockerfile.websocket
    ports:
      - "3001:3001"
    environment:
      - REDIS_URL=redis://redis:6379
    restart: unless-stopped
    networks:
      - fantasy-ai

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - web
    restart: unless-stopped
    networks:
      - fantasy-ai

volumes:
  postgres_data:
  redis_data:

networks:
  fantasy-ai:
    driver: bridge