// Corrected preparePlayerFeatures function - copy this into your file
async function preparePlayerFeatures(player: any, requestData: any) {
  // This is a simplified version - in production, this would pull from multiple data sources
  
  const recentStats = player.stats || [];
  const position = player.position;
  
  return {
    player: {
      recentPoints: recentStats.map((s: any) => s.points || 0),
      recentYards: recentStats.map((s: any) => s.yards || 0),
      recentTouchdowns: recentStats.map((s: any) => s.touchdowns || 0),
      recentTargets: recentStats.map((s: any) => s.targets || 0),
      position,
      age: calculateAge(player.birthDate),
      yearsInLeague: new Date().getFullYear() - (player.rookieYear || 2020),
      injuryStatus: player.injuryStatus || 0,
      teamOffensiveRank: player.team?.offensiveRank || 16,
      teamDefensiveRank: player.team?.defensiveRank || 16,
      homeGame: requestData.homeGame || false,
      opponentDefensiveRank: requestData.opponentRank || 16,
      opponentPointsAllowed: requestData.opponentPointsAllowed || 20,
      weather: requestData.weather || {
        temperature: 72,
        windSpeed: 5,
        precipitation: 0,
      },
      weekNumber: requestData.week || 1,
      timeOfGame: requestData.gameTime || 13,
      restDays: requestData.restDays || 7,
    },
    matchup: {
      playerPosition: position,
      playerAveragePoints: calculateAverage(recentStats.map((s: any) => s.points || 0)),
      playerRecentForm: calculateAverage(recentStats.slice(0, 3).map((s: any) => s.points || 0)),
      playerConsistency: calculateStdDev(recentStats.map((s: any) => s.points || 0)),
      playerUsage: player.usageRate || 0.2,
      defenseRankVsPosition: requestData.defenseRankVsPosition || 16,
      defensePointsAllowedVsPosition: requestData.defensePointsAllowed || 20,
      defenseRecentForm: requestData.defenseRecentForm || 20,
      defenseInjuries: requestData.defenseInjuries || 0,
      defenseScheme: requestData.defenseScheme || 'Hybrid',
      previousMatchups: [],
      gameSpread: requestData.gameSpread || 0,
      overUnder: requestData.overUnder || 45,
      impliedTeamTotal: requestData.impliedTeamTotal || 24,
      timeOfPossession: requestData.timeOfPossession || 30,
      pace: requestData.pace || 65,
      division: requestData.divisionGame || false,
      primetime: requestData.primetime || false,
      playoffs: requestData.playoffs || false,
      mustWin: requestData.mustWin || false,
    },
    injury: {
      age: calculateAge(player.birthDate),
      position,
      height: player.height || 72,
      weight: player.weight || 200,
      bmi: calculateBMI(player.height || 72, player.weight || 200),
      previousInjuries: [],
      snapsLastGame: requestData.snapsLastGame || 60,
      snapsLast4Games: requestData.snapsLast4Games || [60, 58, 62, 55],
      snapShareTrend: 0,
      touchesLastGame: requestData.touchesLastGame || 15,
      touchesLast4Games: requestData.touchesLast4Games || [15, 18, 12, 16],
      daysSinceLastGame: requestData.daysSinceLastGame || 7,
      consecutiveGames: requestData.consecutiveGames || 10,
      practiceParticipation: requestData.practiceStatus || 'Full',
      injuryReportStatus: player.injuryStatus || 'Healthy',
      routeDepth: requestData.routeDepth || 12,
      yardsAfterContact: requestData.yardsAfterContact || 3,
      hitsAbsorbed: requestData.hitsAbsorbed || 5,
      tacklesMade: requestData.tacklesMade || 0,
      gameTemperature: requestData.weather?.temperature || 72,
      fieldType: requestData.fieldType || 'Grass',
      altitude: requestData.altitude || 0,
      travelDistance: requestData.travelDistance || 0,
    },
    trade: {
      currentSeasonPoints: calculateSum(recentStats.map((s: any) => s.points || 0)),
      projectedSeasonPoints: requestData.projectedSeasonPoints || 200,
      consistencyScore: 1 - (calculateStdDev(recentStats.map((s: any) => s.points || 0)) / 10),
      ceilingScore: Math.max(...recentStats.map((s: any) => s.points || 0)),
      floorScore: Math.min(...recentStats.map((s: any) => s.points || 0)),
      position,
      age: calculateAge(player.birthDate),
      injuryHistory: [],
      teamSituation: 'Stable',
      marketValue: requestData.marketValue || 50,
      tradeDeadline: requestData.tradeDeadline || new Date(),
      keeper: requestData.keeper || false,
      contractStatus: requestData.contractStatus || 'Signed',
      replacementValue: requestData.replacementValue || 10,
      positionalScarcity: requestData.positionalScarcity || 'Medium',
      leagueSettings: requestData.leagueSettings || {},
    },
    weather: {
      temperature: requestData.weather?.temperature || 72,
      windSpeed: requestData.weather?.windSpeed || 5,
      precipitation: requestData.weather?.precipitation || 0,
      humidity: requestData.weather?.humidity || 50,
      visibility: requestData.weather?.visibility || 10,
      gameLocation: requestData.gameLocation || 'Indoor',
    },
    weatherProfile: {
      performanceInCold: requestData.coldWeatherPerformance || 1.0,
      performanceInWind: requestData.windPerformance || 1.0,
      performanceInRain: requestData.rainPerformance || 1.0,
      domePlayer: requestData.domePlayer || false,
    },
    sequence: {
      playerId: player.id,
      position: player.position,
      pointsSequence: recentStats.map((s: any) => s.points || 0),
      usageSequence: recentStats.map((s: any) => s.usage || 0),
      efficiencySequence: recentStats.map((s: any) => s.efficiency || 0),
      opponentRankSequence: recentStats.map((s: any) => s.opponentRank || 16),
      gameScriptSequence: recentStats.map((s: any) => s.gameScript || 0),
      injuryStatusSequence: recentStats.map((s: any) => s.injuryStatus || 0),
      seasonNumber: player.seasonNumber || 1,
      gamesPlayed: player.gamesPlayed || 0,
      age: calculateAge(player.birthDate),
      teamChange: player.teamChange || false,
      coachChange: player.coachChange || false,
      schemeChange: player.schemeChange || false,
      currentStreak: player.currentStreak || 0,
      recentTrend: player.recentTrend || 0,
      volatilityScore: player.volatilityScore || 0,
    },
  };
} 