generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ActivityItem {
  id           String     @id
  userId       String
  leagueId     String?
  activityType String
  title        String
  description  String
  metadata     String?
  isPublic     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  League       League?    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Reaction     Reaction[]

  @@index([activityType])
  @@index([createdAt])
  @@index([leagueId])
  @@index([userId])
}

model Alert {
  id        String   @id
  userId    String
  type      String
  title     String
  message   String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BettingInsight {
  id             String   @id
  playerId       String
  propType       String
  recommendation String
  confidence     Float
  reasoning      String
  keyFactors     String
  generatedAt    DateTime @default(now())
  expiresAt      DateTime
  Player         Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([confidence])
  @@index([expiresAt])
  @@index([playerId])
  @@index([propType])
}

model BettingOdds {
  id               String             @id
  playerId         String
  gameId           String
  propType         String
  propName         String
  line             Float
  overOdds         Int
  underOdds        Int
  sportsbook       String
  volume           Int                @default(0)
  isLive           Boolean            @default(true)
  confidence       Float              @default(50)
  createdAt        DateTime           @default(now())
  lastUpdated      DateTime
  Player           Player             @relation(fields: [playerId], references: [id], onDelete: Cascade)
  BettingSelection BettingSelection[]
  OddsMovement     OddsMovement[]

  @@index([gameId])
  @@index([isLive])
  @@index([playerId])
  @@index([propType])
}

model BettingSelection {
  id              String      @id
  bettingSlipId   String
  oddsId          String
  selection       String
  line            Float
  oddsValue       Int
  stake           Float
  potentialPayout Float
  isWon           Boolean?
  actualResult    Float?
  BettingSlip     BettingSlip @relation(fields: [bettingSlipId], references: [id], onDelete: Cascade)
  BettingOdds     BettingOdds @relation(fields: [oddsId], references: [id], onDelete: Cascade)

  @@index([bettingSlipId])
  @@index([oddsId])
}

model BettingSlip {
  id               String             @id
  userId           String
  totalOdds        Float
  potentialPayout  Float
  stake            Float
  status           String             @default("PENDING")
  placedAt         DateTime           @default(now())
  settledAt        DateTime?
  actualPayout     Float?
  BettingSelection BettingSelection[]
  User             User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([placedAt])
  @@index([status])
  @@index([userId])
}

model Bounty {
  id                          String              @id
  creatorId                   String
  title                       String
  description                 String
  bountyAmount                Float
  targetMetric                String
  timeframe                   String
  startDate                   DateTime
  endDate                     DateTime
  status                      String              @default("OPEN")
  maxParticipants             Int                 @default(1)
  isPublic                    Boolean             @default(true)
  escrowId                    String              @unique
  winnerId                    String?
  settledAt                   DateTime?
  leagueId                    String?
  metadata                    String?
  createdAt                   DateTime            @default(now())
  updatedAt                   DateTime
  User_Bounty_creatorIdToUser User                @relation("Bounty_creatorIdToUser", fields: [creatorId], references: [id], onDelete: Cascade)
  EscrowAccount               EscrowAccount       @relation(fields: [escrowId], references: [id], onDelete: Cascade)
  League                      League?             @relation(fields: [leagueId], references: [id])
  User_Bounty_winnerIdToUser  User?               @relation("Bounty_winnerIdToUser", fields: [winnerId], references: [id])
  BountyParticipant           BountyParticipant[]
  BountyUpdate                BountyUpdate[]

  @@index([bountyAmount])
  @@index([creatorId])
  @@index([status])
}

model BountyParticipant {
  id            String   @id
  bountyId      String
  participantId String
  stakeAmount   Float
  currentScore  Float    @default(0)
  joinedAt      DateTime @default(now())
  Bounty        Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  User          User     @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([bountyId, participantId])
  @@index([participantId])
}

model BountyUpdate {
  id        String   @id
  bountyId  String
  type      String
  message   String
  data      String?
  createdAt DateTime @default(now())
  Bounty    Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)

  @@index([bountyId])
  @@index([type])
}

model Contest {
  id             String          @id
  name           String
  description    String
  sport          String          @default("FOOTBALL")
  contestType    String
  entryFee       Float
  totalPrizePool Float
  maxEntries     Int
  currentEntries Int             @default(0)
  salaryCap      Float           @default(50000)
  startTime      DateTime
  endTime        DateTime
  status         String          @default("UPCOMING")
  isPublic       Boolean         @default(true)
  isGuaranteed   Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  ContestEntry   ContestEntry[]
  ContestResult  ContestResult[]
  DFSLineup      DFSLineup[]
  DFSPlayer      DFSPlayer[]

  @@index([contestType])
  @@index([sport])
  @@index([startTime])
  @@index([status])
}

model ContestEntry {
  id            String          @id
  contestId     String
  userId        String
  lineupId      String          @unique
  entryNumber   Int
  totalPoints   Float           @default(0)
  rank          Int?
  payout        Float           @default(0)
  createdAt     DateTime        @default(now())
  Contest       Contest         @relation(fields: [contestId], references: [id], onDelete: Cascade)
  DFSLineup     DFSLineup       @relation(fields: [lineupId], references: [id], onDelete: Cascade)
  User          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  ContestResult ContestResult[]

  @@unique([contestId, userId, entryNumber])
  @@index([contestId])
  @@index([totalPoints])
  @@index([userId])
}

model ContestResult {
  id           String       @id
  contestId    String
  userId       String
  entryId      String
  finalRank    Int
  finalPoints  Float
  payout       Float
  createdAt    DateTime     @default(now())
  Contest      Contest      @relation(fields: [contestId], references: [id], onDelete: Cascade)
  ContestEntry ContestEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([contestId, entryId])
  @@index([contestId])
  @@index([finalRank])
  @@index([userId])
}

model DFSLineup {
  id              String            @id
  userId          String
  contestId       String
  name            String
  totalSalary     Float
  totalPoints     Float             @default(0)
  isOptimal       Boolean           @default(false)
  isLocked        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime
  ContestEntry    ContestEntry?
  Contest         Contest           @relation(fields: [contestId], references: [id], onDelete: Cascade)
  User            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  DFSLineupPlayer DFSLineupPlayer[]

  @@index([contestId])
  @@index([totalPoints])
  @@index([userId])
}

model DFSLineupPlayer {
  id           String    @id
  lineupId     String
  dfsPlayerId  String
  position     String
  slotPosition String
  salary       Float
  points       Float     @default(0)
  DFSPlayer    DFSPlayer @relation(fields: [dfsPlayerId], references: [id], onDelete: Cascade)
  DFSLineup    DFSLineup @relation(fields: [lineupId], references: [id], onDelete: Cascade)

  @@unique([lineupId, slotPosition])
  @@index([dfsPlayerId])
  @@index([lineupId])
}

model DFSPlayer {
  id               String            @id
  contestId        String
  externalPlayerId String
  name             String
  team             String
  position         String
  salary           Float
  projectedPoints  Float
  actualPoints     Float             @default(0)
  ownership        Float             @default(0)
  value            Float             @default(0)
  gameTime         DateTime?
  isActive         Boolean           @default(true)
  injuryStatus     String?
  DFSLineupPlayer  DFSLineupPlayer[]
  Contest          Contest           @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([contestId, externalPlayerId])
  @@index([contestId])
  @@index([position])
  @@index([projectedPoints])
  @@index([salary])
}

model DataCollectionRun {
  id           String         @id
  source       String
  dataType     String
  startTime    DateTime       @default(now())
  endTime      DateTime?
  recordsCount Int            @default(0)
  status       String         @default("RUNNING")
  error        String?
  createdAt    DateTime       @default(now())
  RawDataCache RawDataCache[]

  @@index([createdAt])
  @@index([dataType])
  @@index([source])
  @@index([status])
}

model Draft {
  id               String             @id
  creatorId        String
  leagueId         String?
  name             String
  description      String?
  sport            String             @default("FOOTBALL")
  draftType        String
  draftOrder       String             @default("STANDARD")
  totalRounds      Int                @default(15)
  timePerPick      Int                @default(90)
  isAuction        Boolean            @default(false)
  auctionBudget    Float?
  isSnakeDraft     Boolean            @default(true)
  isMockDraft      Boolean            @default(false)
  isPublic         Boolean            @default(true)
  maxParticipants  Int                @default(12)
  scheduledStart   DateTime?
  actualStart      DateTime?
  endedAt          DateTime?
  status           String             @default("SCHEDULED")
  currentRound     Int                @default(1)
  currentPick      Int                @default(1)
  currentPickerId  String?
  settings         String             @default("{}")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  User             User               @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  League           League?            @relation(fields: [leagueId], references: [id])
  DraftBoard       DraftBoard?
  DraftParticipant DraftParticipant[]
  DraftPick        DraftPick[]
  Message          Message[]

  @@index([draftType])
  @@index([scheduledStart])
  @@index([sport])
  @@index([status])
}

model DraftBoard {
  id               String   @id
  draftId          String   @unique
  availablePlayers String
  rankings         String
  adp              String
  projections      String
  lastUpdated      DateTime @default(now())
  Draft            Draft    @relation(fields: [draftId], references: [id], onDelete: Cascade)

  @@index([draftId])
}

model DraftParticipant {
  id            String      @id
  draftId       String
  userId        String
  draftPosition Int
  teamName      String?
  isReady       Boolean     @default(false)
  isAutoPick    Boolean     @default(false)
  timeouts      Int         @default(3)
  totalSpent    Float       @default(0)
  joinedAt      DateTime    @default(now())
  Draft         Draft       @relation(fields: [draftId], references: [id], onDelete: Cascade)
  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  DraftPick     DraftPick[]

  @@unique([draftId, draftPosition])
  @@unique([draftId, userId])
  @@index([draftId])
  @@index([userId])
}

model DraftPick {
  id               String           @id
  draftId          String
  participantId    String
  userId           String
  playerId         String
  playerName       String
  playerPosition   String
  playerTeam       String
  round            Int
  pick             Int
  pickInRound      Int
  auctionPrice     Float?
  isKeeper         Boolean          @default(false)
  pickTime         DateTime         @default(now())
  timeToMake       Int?
  isAutoPick       Boolean          @default(false)
  Draft            Draft            @relation(fields: [draftId], references: [id], onDelete: Cascade)
  DraftParticipant DraftParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  User             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([draftId, round, pickInRound])
  @@index([draftId])
  @@index([participantId])
  @@index([userId])
}

model EscrowAccount {
  id                    String              @id
  totalAmount           Float
  creatorAmount         Float
  opponentAmount        Float
  status                String              @default("ACTIVE")
  stripePaymentIntentId String?
  releasedAt            DateTime?
  releasedToId          String?
  refundedAt            DateTime?
  metadata              String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime
  Bounty                Bounty?
  User                  User?               @relation(fields: [releasedToId], references: [id])
  EscrowTransaction     EscrowTransaction[]
  Wager                 Wager?

  @@index([status])
}

model EscrowTransaction {
  id                  String        @id
  escrowId            String
  userId              String
  type                String
  amount              Float
  status              String        @default("PENDING")
  stripeTransactionId String?
  description         String
  processedAt         DateTime?
  createdAt           DateTime      @default(now())
  EscrowAccount       EscrowAccount @relation(fields: [escrowId], references: [id], onDelete: Cascade)
  User                User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([type])
  @@index([userId])
}

model Friendship {
  id                                String   @id
  initiatorId                       String
  recipientId                       String
  status                            String   @default("PENDING")
  createdAt                         DateTime @default(now())
  updatedAt                         DateTime
  User_Friendship_initiatorIdToUser User     @relation("Friendship_initiatorIdToUser", fields: [initiatorId], references: [id], onDelete: Cascade)
  User_Friendship_recipientIdToUser User     @relation("Friendship_recipientIdToUser", fields: [recipientId], references: [id], onDelete: Cascade)

  @@unique([initiatorId, recipientId])
  @@index([initiatorId])
  @@index([recipientId])
  @@index([status])
}

model GameData {
  id           String   @id
  externalId   String   @unique
  sport        String
  homeTeam     String
  awayTeam     String
  gameTime     DateTime
  venue        String?
  weather      String?
  homeScore    Int?
  awayScore    Int?
  status       String
  quarter      Int?
  timeLeft     String?
  lastPlay     String?
  scoringPlays String?
  statistics   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime

  @@index([awayTeam])
  @@index([gameTime])
  @@index([homeTeam])
  @@index([sport])
  @@index([status])
}

model League {
  id               String            @id
  userId           String
  provider         String
  providerId       String
  name             String
  season           String
  sport            String            @default("FOOTBALL")
  isActive         Boolean           @default(true)
  settings         String
  lastSync         DateTime?
  lastScoreUpdate  DateTime?
  currentWeek      Int?
  platform         String?
  externalId       String?
  scoringSettings  Json?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  wageringEnabled  Boolean           @default(false)
  ActivityItem     ActivityItem[]
  Bounty           Bounty[]
  Draft            Draft[]
  User             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  Message          Message[]
  Player           Player[]
  Team             Team[]
  Wager            Wager[]
  WageringSettings WageringSettings?
  
  // Social Relations
  SocialPost       SocialPost[]
  
  // Real-time Relations
  ScoreSnapshot    ScoreSnapshot[]

  @@unique([provider, providerId])
}

model MemberWageringOptIn {
  id                 String           @id
  userId             String
  wageringSettingsId String
  optedIn            Boolean          @default(false)
  dailyLimit         Float?
  weeklyLimit        Float?
  allowLiveBetting   Boolean          @default(true)
  allowPlayerTrades  Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime
  User               User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  WageringSettings   WageringSettings @relation(fields: [wageringSettingsId], references: [id], onDelete: Cascade)

  @@unique([userId, wageringSettingsId])
}

model Message {
  id                             String     @id
  senderId                       String
  recipientId                    String?
  leagueId                       String?
  draftId                        String?
  messageType                    String     @default("TEXT")
  content                        String
  attachments                    String?
  isEdited                       Boolean    @default(false)
  editedAt                       DateTime?
  isDeleted                      Boolean    @default(false)
  deletedAt                      DateTime?
  parentId                       String?
  createdAt                      DateTime   @default(now())
  updatedAt                      DateTime
  Draft                          Draft?     @relation(fields: [draftId], references: [id], onDelete: Cascade)
  League                         League?    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  Message                        Message?   @relation("MessageToMessage", fields: [parentId], references: [id])
  other_Message                  Message[]  @relation("MessageToMessage")
  User_Message_recipientIdToUser User?      @relation("Message_recipientIdToUser", fields: [recipientId], references: [id], onDelete: Cascade)
  User_Message_senderIdToUser    User       @relation("Message_senderIdToUser", fields: [senderId], references: [id], onDelete: Cascade)
  Reaction                       Reaction[]

  @@index([createdAt])
  @@index([draftId])
  @@index([leagueId])
  @@index([senderId])
}

model MockDraft {
  id           String   @id
  userId       String
  sport        String   @default("FOOTBALL")
  draftType    String
  teamCount    Int      @default(12)
  rounds       Int      @default(15)
  userPosition Int
  results      String
  userTeam     String
  aiAnalysis   String?
  score        Float?
  completedAt  DateTime @default(now())
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sport])
  @@index([userId])
}

model NewsArticle {
  id          String   @id
  source      String
  title       String
  content     String
  summary     String?
  url         String   @unique
  author      String?
  publishedAt DateTime
  sport       String?
  teams       String?
  players     String?
  sentiment   Float?
  category    String?
  imageUrl    String?
  isProcessed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@index([isProcessed])
  @@index([publishedAt])
  @@index([source])
  @@index([sport])
}

model Notification {
  id               String    @id
  userId           String
  notificationType String
  title            String
  message          String
  data             String?
  isRead           Boolean   @default(false)
  readAt           DateTime?
  createdAt        DateTime  @default(now())
  User             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([isRead])
  @@index([userId])
}

model OddsMovement {
  id                String      @id
  oddsId            String
  previousLine      Float
  newLine           Float
  previousOverOdds  Int
  newOverOdds       Int
  previousUnderOdds Int
  newUnderOdds      Int
  movement          Float
  trigger           String
  timestamp         DateTime    @default(now())
  BettingOdds       BettingOdds @relation(fields: [oddsId], references: [id], onDelete: Cascade)

  @@index([oddsId])
  @@index([timestamp])
}

model Player {
  id                String              @id
  externalId        String
  name              String
  position          String
  team              String
  leagueId          String
  stats             String
  projections       String?
  injuryStatus      String?
  imageUrl          String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  BettingInsight    BettingInsight[]
  BettingOdds       BettingOdds[]
  League            League              @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  PlayerPropHistory PlayerPropHistory[]
  Prediction        Prediction[]
  Roster            Roster[]
  ValueSnapshot     ValueSnapshot[]
  WagerPlayer       WagerPlayer[]
  
  // ML Relations
  MLPrediction      MLPrediction[]
  AnomalyDetection  AnomalyDetection[]

  @@unique([externalId, leagueId])
}

model PlayerPropHistory {
  id           String   @id
  playerId     String
  gameId       String
  propType     String
  line         Float
  actualResult Float
  hit          Boolean
  gameDate     DateTime
  opponent     String
  Player       Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([gameDate])
  @@index([playerId])
  @@index([propType])
}

model Prediction {
  id         String   @id
  userId     String
  playerId   String
  type       String
  week       Int
  season     String
  prediction String
  confidence Float
  actual     String?
  accuracy   Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  Player     Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ProcessingLog {
  id               String       @id
  rawDataId        String
  processType      String
  recordsProcessed Int          @default(0)
  recordsFailed    Int          @default(0)
  status           String       @default("PROCESSING")
  error            String?
  startTime        DateTime     @default(now())
  endTime          DateTime?
  RawDataCache     RawDataCache @relation(fields: [rawDataId], references: [id], onDelete: Cascade)

  @@index([processType])
  @@index([rawDataId])
  @@index([status])
}

model RawDataCache {
  id                String            @id
  collectionRunId   String
  source            String
  dataType          String
  url               String?
  rawData           String
  recordCount       Int               @default(0)
  isProcessed       Boolean           @default(false)
  processedAt       DateTime?
  createdAt         DateTime          @default(now())
  ProcessingLog     ProcessingLog[]
  DataCollectionRun DataCollectionRun @relation(fields: [collectionRunId], references: [id], onDelete: Cascade)

  @@index([collectionRunId])
  @@index([createdAt])
  @@index([isProcessed])
  @@index([source])
}

model Reaction {
  id           String        @id
  userId       String
  messageId    String?
  activityId   String?
  reactionType String
  createdAt    DateTime      @default(now())
  ActivityItem ActivityItem? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  Message      Message?      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  User         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId, reactionType])
  @@unique([userId, messageId, reactionType])
  @@index([activityId])
  @@index([messageId])
}

model Roster {
  id        String   @id
  teamId    String
  playerId  String
  position  String
  isStarter Boolean  @default(true)
  week      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime
  Player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  Team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, playerId, week])
}

model Subscription {
  id                   String    @id
  userId               String    @unique
  tier                 String    @default("FREE")
  status               String    @default("ACTIVE")
  startDate            DateTime  @default(now())
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime
  User                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Team {
  id        String   @id
  userId    String
  leagueId  String
  name      String
  rank      Int      @default(0)
  points    Float    @default(0)
  wins      Int      @default(0)
  losses    Int      @default(0)
  ties      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Roster    Roster[]
  League    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                                      String                @id
  email                                   String                @unique
  name                                    String?
  image                                   String?
  password                                String?
  createdAt                               DateTime              @default(now())
  updatedAt                               DateTime
  ActivityItem                            ActivityItem[]
  Alert                                   Alert[]
  BettingSlip                             BettingSlip[]
  Bounty_Bounty_creatorIdToUser           Bounty[]              @relation("Bounty_creatorIdToUser")
  Bounty_Bounty_winnerIdToUser            Bounty[]              @relation("Bounty_winnerIdToUser")
  BountyParticipant                       BountyParticipant[]
  ContestEntry                            ContestEntry[]
  ContestResult                           ContestResult[]
  DFSLineup                               DFSLineup[]
  Draft                                   Draft[]
  DraftParticipant                        DraftParticipant[]
  DraftPick                               DraftPick[]
  EscrowAccount                           EscrowAccount[]
  EscrowTransaction                       EscrowTransaction[]
  Friendship_Friendship_initiatorIdToUser Friendship[]          @relation("Friendship_initiatorIdToUser")
  Friendship_Friendship_recipientIdToUser Friendship[]          @relation("Friendship_recipientIdToUser")
  League                                  League[]
  MemberWageringOptIn                     MemberWageringOptIn[]
  Message_Message_recipientIdToUser       Message[]             @relation("Message_recipientIdToUser")
  Message_Message_senderIdToUser          Message[]             @relation("Message_senderIdToUser")
  MockDraft                               MockDraft[]
  Notification                            Notification[]
  Prediction                              Prediction[]
  Reaction                                Reaction[]
  Subscription                            Subscription?
  Team                                    Team[]
  UserPreferences                         UserPreferences?
  UserSubscription                        UserSubscription[]
  UserWallet                              UserWallet?
  Wager_Wager_creatorIdToUser             Wager[]               @relation("Wager_creatorIdToUser")
  Wager_Wager_opponentIdToUser            Wager[]               @relation("Wager_opponentIdToUser")
  Wager_Wager_winnerIdToUser              Wager[]               @relation("Wager_winnerIdToUser")
  
  // Gamification & Social Relations
  UserAchievement                         UserAchievement[]
  UserGameStats                           UserGameStats?
  UserChallenge                           UserChallenge[]
  SocialPost                              SocialPost[]
  SocialReaction                          SocialReaction[]
  SocialComment                           SocialComment[]
  UserFriends                             FriendConnection[]    @relation("UserFriends")
  FriendUsers                             FriendConnection[]    @relation("FriendUsers")
  ChallengerChallenges                    HeadToHeadChallenge[] @relation("ChallengerChallenges")
  ChallengedChallenges                    HeadToHeadChallenge[] @relation("ChallengedChallenges")
  BattleParticipant                       BattleParticipant[]
}

model UserPreferences {
  id            String   @id
  userId        String   @unique
  notifications String   @default("{}")
  theme         String   @default("dark")
  aiPersonality String   @default("professional")
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  User          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSubscription {
  id                   String   @id
  userId               String
  tier                 String
  status               String
  billingInterval      String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  stripeSubscriptionId String?
  stripeCustomerId     String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime
  User                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserWallet {
  id                     String   @id
  userId                 String   @unique
  balance                Float    @default(0)
  lockedAmount           Float    @default(0)
  stripeCustomerId       String?
  defaultPaymentMethodId String?
  totalDeposited         Float    @default(0)
  totalWithdrawn         Float    @default(0)
  totalWon               Float    @default(0)
  totalLost              Float    @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime
  User                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ValueSnapshot {
  id         String   @id
  playerId   String
  stockPrice Float
  timestamp  DateTime @default(now())
  wagerId    String?
  metadata   String?
  Player     Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId])
  @@index([timestamp])
}

model Wager {
  id                          String        @id
  creatorId                   String
  opponentId                  String?
  type                        String
  status                      String        @default("OPEN")
  title                       String
  description                 String
  totalValue                  Float
  creatorStake                Float
  opponentStake               Float
  performance                 String
  timeframe                   String
  startDate                   DateTime
  endDate                     DateTime
  settledAt                   DateTime?
  winnerId                    String?
  escrowId                    String        @unique
  leagueId                    String?
  isPublic                    Boolean       @default(true)
  metadata                    String?
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime
  User_Wager_creatorIdToUser  User          @relation("Wager_creatorIdToUser", fields: [creatorId], references: [id], onDelete: Cascade)
  EscrowAccount               EscrowAccount @relation(fields: [escrowId], references: [id], onDelete: Cascade)
  League                      League?       @relation(fields: [leagueId], references: [id])
  User_Wager_opponentIdToUser User?         @relation("Wager_opponentIdToUser", fields: [opponentId], references: [id], onDelete: Cascade)
  User_Wager_winnerIdToUser   User?         @relation("Wager_winnerIdToUser", fields: [winnerId], references: [id])
  WagerPlayer                 WagerPlayer[]
  WagerUpdate                 WagerUpdate[]

  @@index([creatorId])
  @@index([opponentId])
  @@index([status])
  @@index([type])
}

model WagerPlayer {
  id           String   @id
  wagerId      String
  playerId     String
  side         String
  stockPrice   Float
  currentValue Float
  isTraded     Boolean  @default(false)
  createdAt    DateTime @default(now())
  Player       Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  Wager        Wager    @relation(fields: [wagerId], references: [id], onDelete: Cascade)

  @@unique([wagerId, playerId, side])
}

model WagerUpdate {
  id        String   @id
  wagerId   String
  type      String
  message   String
  data      String?
  createdAt DateTime @default(now())
  Wager     Wager    @relation(fields: [wagerId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([wagerId])
}

model WageringSettings {
  id                          String                @id
  leagueId                    String                @unique
  enablePlayerTrading         Boolean               @default(true)
  enableLiveBetting           Boolean               @default(false)
  enableBounties              Boolean               @default(true)
  enablePropBets              Boolean               @default(false)
  enableCrypto                Boolean               @default(false)
  minWagerAmount              Float                 @default(5.0)
  maxWagerAmount              Float                 @default(1000.0)
  maxDailyWagerTotal          Float                 @default(5000.0)
  requireCommissionerApproval Boolean               @default(false)
  allowGuestBetting           Boolean               @default(false)
  blockedMembers              String                @default("[]")
  wageringAdmins              String                @default("[]")
  allowCrossLeagueBetting     Boolean               @default(false)
  profitSharingPercent        Float                 @default(0.0)
  escrowHoldDays              Int                   @default(0)
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime
  MemberWageringOptIn         MemberWageringOptIn[]
  League                      League                @relation(fields: [leagueId], references: [id], onDelete: Cascade)
}

model subscription_usage {
  userId           String
  period           String
  aiInsightsUsed   Int      @default(0)
  voiceMinutesUsed Int      @default(0)
  leaguesCreated   Int      @default(0)
  apiCallsMade     Int      @default(0)
  lastUpdated      DateTime @default(now())

  @@id([userId, period])
}

// ============================================
// GAMIFICATION & ACHIEVEMENT MODELS
// ============================================

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  category    String   // performance, social, strategy, collector, special
  rarity      String   // common, rare, epic, legendary
  xpReward    Int
  gemReward   Int?
  secret      Boolean  @default(false)
  
  // Requirements stored as JSON
  requirements Json
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  UserAchievement UserAchievement[]
  
  @@index([category])
  @@index([rarity])
}

model UserAchievement {
  id            String   @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())
  progress      Json?    // Current progress towards achievement
  
  User          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([unlockedAt])
}

model UserGameStats {
  id                String   @id @default(cuid())
  userId            String   @unique
  level             Int      @default(1)
  currentXP         Int      @default(0)
  totalXP           Int      @default(0)
  gems              Int      @default(0)
  
  // Stats
  gamesWon          Int      @default(0)
  gamesLost         Int      @default(0)
  perfectLineups    Int      @default(0)
  tradesMade        Int      @default(0)
  predictionsCorrect Int     @default(0)
  totalPoints       Float    @default(0)
  highestWeeklyScore Float   @default(0)
  championshipsWon  Int      @default(0)
  
  // Streaks
  dailyStreak       Int      @default(0)
  weeklyStreak      Int      @default(0)
  winningStreak     Int      @default(0)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([level])
  @@index([totalXP])
}

// ============================================
// CHALLENGES & COMPETITIONS
// ============================================

model Challenge {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  type        String   // individual, league, global
  category    String   // scoring, roster, prediction, social, special
  difficulty  String   // easy, medium, hard, insane
  
  // Requirements and rewards as JSON
  requirements Json
  rewards      Json
  
  // Time limits
  startDate    DateTime
  endDate      DateTime
  
  isActive     Boolean  @default(true)
  participants Int      @default(0)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  UserChallenge UserChallenge[]
  ChallengeLeaderboard ChallengeLeaderboard[]
  
  @@index([type])
  @@index([category])
  @@index([isActive])
  @@index([startDate, endDate])
}

model UserChallenge {
  id          String   @id @default(cuid())
  userId      String
  challengeId String
  startedAt   DateTime @default(now())
  completedAt DateTime?
  progress    Json     // Progress tracking data
  score       Float?
  claimed     Boolean  @default(false)
  
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, challengeId])
  @@index([userId])
  @@index([completedAt])
}

model ChallengeLeaderboard {
  id          String   @id @default(cuid())
  challengeId String
  userId      String
  username    String
  score       Float
  rank        Int
  completedAt DateTime
  
  Challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  
  @@unique([challengeId, userId])
  @@index([challengeId, rank])
  @@index([score])
}

// ============================================
// LEADERBOARDS & RANKINGS
// ============================================

model Leaderboard {
  id          String   @id @default(cuid())
  name        String
  type        String   // global, league, friends, category
  category    String?  // overall, weekly, accuracy, trading, social, achievements
  timeframe   String   // all-time, season, month, week, daily
  
  metadata    Json?    // Additional leaderboard info
  lastUpdated DateTime @default(now())
  
  LeaderboardEntry LeaderboardEntry[]
  
  @@unique([type, category, timeframe])
  @@index([type])
  @@index([lastUpdated])
}

model LeaderboardEntry {
  id            String   @id @default(cuid())
  leaderboardId String
  userId        String
  username      String
  avatar        String?
  level         Int?
  score         Float
  rank          Int
  previousRank  Int?
  trend         String?  // up, down, same, new
  metadata      Json?    // Additional stats
  lastUpdated   DateTime @default(now())
  
  Leaderboard   Leaderboard @relation(fields: [leaderboardId], references: [id], onDelete: Cascade)
  
  @@unique([leaderboardId, userId])
  @@index([leaderboardId, rank])
  @@index([score])
  @@index([userId])
}

// ============================================
// SOCIAL FEATURES
// ============================================

model SocialPost {
  id          String   @id @default(cuid())
  authorId    String
  leagueId    String?
  type        String   // status, achievement, trade, lineup, prediction, highlight, trash_talk
  content     String   @db.Text
  media       Json?    // Media attachments
  attachments Json?    // Game/player/trade attachments
  visibility  String   @default("league") // public, league, friends
  
  viewCount   Int      @default(0)
  shareCount  Int      @default(0)
  
  createdAt   DateTime @default(now())
  editedAt    DateTime?
  
  User        User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  League      League?  @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  SocialReaction SocialReaction[]
  SocialComment  SocialComment[]
  
  @@index([authorId])
  @@index([leagueId])
  @@index([type])
  @@index([createdAt])
}

model SocialReaction {
  id        String   @id @default(cuid())
  postId    String?
  commentId String?
  userId    String
  emoji     String
  createdAt DateTime @default(now())
  
  Post      SocialPost?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  Comment   SocialComment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([postId, userId, emoji])
  @@unique([commentId, userId, emoji])
  @@index([postId])
  @@index([commentId])
  @@index([userId])
}

model SocialComment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  content   String   @db.Text
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  
  Post      SocialPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  User      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Parent    SocialComment? @relation("CommentReplies", fields: [parentId], references: [id])
  Replies   SocialComment[] @relation("CommentReplies")
  
  SocialReaction SocialReaction[]
  
  @@index([postId])
  @@index([authorId])
  @@index([parentId])
}

// ============================================
// FRIEND SYSTEM & HEAD-TO-HEAD
// ============================================

model FriendConnection {
  id          String   @id @default(cuid())
  userId      String
  friendId    String
  status      String   @default("pending") // pending, accepted, blocked
  friendsSince DateTime?
  
  // Stats
  headToHeadWins   Int @default(0)
  headToHeadLosses Int @default(0)
  headToHeadTies   Int @default(0)
  lastMatchup      DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  User        User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  Friend      User     @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)
  
  @@unique([userId, friendId])
  @@index([userId])
  @@index([friendId])
  @@index([status])
}

model HeadToHeadChallenge {
  id           String   @id @default(cuid())
  challengerId String
  challengedId String
  type         String   // weekly, season, custom
  stakes       Json     // Stakes details
  conditions   Json     // Challenge conditions
  status       String   @default("pending") // pending, active, completed, declined
  
  startDate    DateTime
  endDate      DateTime
  
  result       Json?    // Challenge results
  winnerId     String?
  completedAt  DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  Challenger   User     @relation("ChallengerChallenges", fields: [challengerId], references: [id], onDelete: Cascade)
  Challenged   User     @relation("ChallengedChallenges", fields: [challengedId], references: [id], onDelete: Cascade)
  
  @@index([challengerId])
  @@index([challengedId])
  @@index([status])
  @@index([startDate, endDate])
}

model Battle {
  id          String   @id @default(cuid())
  type        String   // quick, tournament, ladder, custom
  format      String   // classic, draft, best_ball, survivor
  status      String   @default("waiting") // waiting, drafting, active, completed
  
  settings    Json     // Battle settings
  prizes      Json     // Prize structure
  
  currentRound Int?
  winnerId     String?
  
  chatEnabled Boolean  @default(true)
  
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  BattleParticipant BattleParticipant[]
  BattleRound       BattleRound[]
  
  @@index([type])
  @@index([status])
  @@index([startedAt])
}

model BattleParticipant {
  id        String   @id @default(cuid())
  battleId  String
  userId    String
  roster    Json?    // Player roster
  score     Float    @default(0)
  rank      Int?
  eliminated Boolean @default(false)
  powerUpsUsed Json   @default("[]")
  stats     Json     // Battle stats
  
  Battle    Battle   @relation(fields: [battleId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([battleId, userId])
  @@index([battleId])
  @@index([userId])
}

model BattleRound {
  id          String   @id @default(cuid())
  battleId    String
  roundNumber Int
  startDate   DateTime
  endDate     DateTime
  matchups    Json     // Round matchups
  leaderboard Json     // Round standings
  events      Json     @default("[]") // Battle events
  
  Battle      Battle   @relation(fields: [battleId], references: [id], onDelete: Cascade)
  
  @@unique([battleId, roundNumber])
  @@index([battleId])
}

// ============================================
// ML DATA MODELS
// ============================================

model MLPrediction {
  id          String   @id @default(cuid())
  modelType   String   // player_performance, injury_risk, lineup_optimizer, etc
  playerId    String?
  teamId      String?
  gameId      String?
  
  prediction  Json     // Prediction details
  confidence  Float
  features    Json     // Input features used
  
  actualResult Json?   // Actual outcome for accuracy tracking
  accuracy    Float?
  
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  
  Player      Player?  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@index([modelType])
  @@index([playerId])
  @@index([confidence])
  @@index([createdAt])
}

model MLTrainingData {
  id          String   @id @default(cuid())
  modelType   String
  dataType    String   // features, labels, validation
  data        Json     // Training data
  version     Int
  
  recordCount Int
  features    Json     // Feature metadata
  
  createdAt   DateTime @default(now())
  
  @@index([modelType])
  @@index([version])
  @@index([dataType])
}

model MLModelMetadata {
  id          String   @id @default(cuid())
  modelType   String   @unique
  version     Int
  accuracy    Float
  parameters  Json     // Model parameters
  metrics     Json     // Performance metrics
  
  trainedAt   DateTime
  deployedAt  DateTime?
  isActive    Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([modelType])
  @@index([isActive])
}

model AnomalyDetection {
  id          String   @id @default(cuid())
  type        String   // performance, injury, usage, market, social, weather
  severity    String   // low, medium, high, critical
  confidence  Float
  
  playerId    String?
  teamId      String?
  
  description String   @db.Text
  details     Json     // Anomaly details
  impact      Json     // Fantasy impact
  
  resolved    Boolean  @default(false)
  resolvedAt  DateTime?
  
  createdAt   DateTime @default(now())
  
  Player      Player?  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@index([type])
  @@index([severity])
  @@index([playerId])
  @@index([resolved])
  @@index([createdAt])
}

model ScoreSnapshot {
  id        String   @id @default(cuid())
  leagueId  String
  week      Int
  scores    Json     // Snapshot of scores
  timestamp DateTime @default(now())
  
  League    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  @@index([leagueId])
  @@index([week])
  @@index([timestamp])
}
