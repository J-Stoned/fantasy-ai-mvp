generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
  // For production, falls back to the committed database file
  // url      = "file:./prisma/dev.db"
}

model User {
  id                  String                @id @default(cuid())
  email               String                @unique
  name                String?
  image               String?
  password            String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  activityItems       ActivityItem[]
  alerts              Alert[]
  bettingSlips        BettingSlip[]         @relation("UserBettingSlips")
  bountiesWon         Bounty[]              @relation("BountyWinner")
  bountiesCreated     Bounty[]              @relation("BountyCreator")
  bountyParticipation BountyParticipant[]   @relation("BountyParticipant")
  contestEntries      ContestEntry[]
  contestResults      ContestResult[]
  dfsLineups          DFSLineup[]
  draftsCreated       Draft[]               @relation("DraftCreator")
  draftParticipants   DraftParticipant[]
  draftPicks          DraftPick[]
  escrowReleases      EscrowAccount[]
  escrowTransactions  EscrowTransaction[]
  friendsReceived     Friendship[]          @relation("FriendshipRecipient")
  friendsInitiated    Friendship[]          @relation("FriendshipInitiator")
  leagues             League[]
  wageringOptIns      MemberWageringOptIn[]
  receivedMessages    Message[]             @relation("MessageRecipient")
  sentMessages        Message[]             @relation("MessageSender")
  mockDrafts          MockDraft[]
  notifications       Notification[]
  predictions         Prediction[]
  reactions           Reaction[]
  subscription        Subscription?
  teams               Team[]
  preferences         UserPreferences?
  userSubscriptions   UserSubscription[]    @relation("UserSubscriptions")
  wallet              UserWallet?
  wagersWon           Wager[]               @relation("WagerWinner")
  wagersOpposed       Wager[]               @relation("WagerOpponent")
  wagersCreated       Wager[]               @relation("WagerCreator")
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  tier                 String    @default("FREE")
  status               String    @default("ACTIVE")
  startDate            DateTime  @default(now())
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model League {
  id               String            @id @default(cuid())
  userId           String
  provider         String
  providerId       String
  name             String
  season           String
  sport            String            @default("FOOTBALL")
  isActive         Boolean           @default(true)
  settings         String
  lastSync         DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  wageringEnabled  Boolean           @default(false)
  activities       ActivityItem[]
  bounties         Bounty[]
  drafts           Draft[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages         Message[]
  players          Player[]
  teams            Team[]
  wagers           Wager[]
  wageringSettings WageringSettings?

  @@unique([provider, providerId])
}

model WageringSettings {
  id                          String                @id @default(cuid())
  leagueId                    String                @unique
  enablePlayerTrading         Boolean               @default(true)
  enableLiveBetting           Boolean               @default(false)
  enableBounties              Boolean               @default(true)
  enablePropBets              Boolean               @default(false)
  enableCrypto                Boolean               @default(false)
  minWagerAmount              Float                 @default(5.0)
  maxWagerAmount              Float                 @default(1000.0)
  maxDailyWagerTotal          Float                 @default(5000.0)
  requireCommissionerApproval Boolean               @default(false)
  allowGuestBetting           Boolean               @default(false)
  blockedMembers              String                @default("[]")
  wageringAdmins              String                @default("[]")
  allowCrossLeagueBetting     Boolean               @default(false)
  profitSharingPercent        Float                 @default(0.0)
  escrowHoldDays              Int                   @default(0)
  createdAt                   DateTime              @default(now())
  updatedAt                   DateTime              @updatedAt
  memberOptIns                MemberWageringOptIn[]
  league                      League                @relation(fields: [leagueId], references: [id], onDelete: Cascade)
}

model MemberWageringOptIn {
  id                 String           @id @default(cuid())
  userId             String
  wageringSettingsId String
  optedIn            Boolean          @default(false)
  dailyLimit         Float?
  weeklyLimit        Float?
  allowLiveBetting   Boolean          @default(true)
  allowPlayerTrades  Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  wageringSettings   WageringSettings @relation(fields: [wageringSettingsId], references: [id], onDelete: Cascade)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, wageringSettingsId])
}

model Team {
  id        String   @id @default(cuid())
  userId    String
  leagueId  String
  name      String
  rank      Int      @default(0)
  points    Float    @default(0)
  wins      Int      @default(0)
  losses    Int      @default(0)
  ties      Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  roster    Roster[]
  league    League   @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Player {
  id              String              @id @default(cuid())
  externalId      String
  name            String
  position        String
  team            String
  leagueId        String
  stats           String
  projections     String?
  injuryStatus    String?
  imageUrl        String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  bettingInsights BettingInsight[]    @relation("PlayerBettingInsights")
  bettingOdds     BettingOdds[]       @relation("PlayerBettingOdds")
  league          League              @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  propHistory     PlayerPropHistory[] @relation("PlayerPropHistory")
  predictions     Prediction[]
  roster          Roster[]
  valueSnapshots  ValueSnapshot[]
  wagerPlayers    WagerPlayer[]

  @@unique([externalId, leagueId])
}

model Roster {
  id        String   @id @default(cuid())
  teamId    String
  playerId  String
  position  String
  isStarter Boolean  @default(true)
  week      Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, playerId, week])
}

model Prediction {
  id         String   @id @default(cuid())
  userId     String
  playerId   String
  type       String
  week       Int
  season     String
  prediction String
  confidence Float
  actual     String?
  accuracy   Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  player     Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Alert {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserPreferences {
  id            String   @id @default(cuid())
  userId        String   @unique
  notifications String   @default("{}")
  theme         String   @default("dark")
  aiPersonality String   @default("professional")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSubscription {
  id                   String   @id @default(cuid())
  userId               String
  tier                 String
  status               String
  billingInterval      String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean  @default(false)
  stripeSubscriptionId String?
  stripeCustomerId     String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation("UserSubscriptions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model SubscriptionUsage {
  userId           String
  period           String
  aiInsightsUsed   Int      @default(0)
  voiceMinutesUsed Int      @default(0)
  leaguesCreated   Int      @default(0)
  apiCallsMade     Int      @default(0)
  lastUpdated      DateTime @default(now())

  @@id([userId, period])
  @@map("subscription_usage")
}

model Wager {
  id            String        @id @default(cuid())
  creatorId     String
  opponentId    String?
  type          String
  status        String        @default("OPEN")
  title         String
  description   String
  totalValue    Float
  creatorStake  Float
  opponentStake Float
  performance   String
  timeframe     String
  startDate     DateTime
  endDate       DateTime
  settledAt     DateTime?
  winnerId      String?
  escrowId      String        @unique
  leagueId      String?
  isPublic      Boolean       @default(true)
  metadata      String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  league        League?       @relation(fields: [leagueId], references: [id])
  escrow        EscrowAccount @relation(fields: [escrowId], references: [id], onDelete: Cascade)
  winner        User?         @relation("WagerWinner", fields: [winnerId], references: [id])
  opponent      User?         @relation("WagerOpponent", fields: [opponentId], references: [id], onDelete: Cascade)
  creator       User          @relation("WagerCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  wagerPlayers  WagerPlayer[]
  wagerUpdates  WagerUpdate[]

  @@index([creatorId])
  @@index([opponentId])
  @@index([status])
  @@index([type])
}

model WagerPlayer {
  id           String   @id @default(cuid())
  wagerId      String
  playerId     String
  side         String
  stockPrice   Float
  currentValue Float
  isTraded     Boolean  @default(false)
  createdAt    DateTime @default(now())
  player       Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  wager        Wager    @relation(fields: [wagerId], references: [id], onDelete: Cascade)

  @@unique([wagerId, playerId, side])
}

model EscrowAccount {
  id                    String              @id @default(cuid())
  totalAmount           Float
  creatorAmount         Float
  opponentAmount        Float
  status                String              @default("ACTIVE")
  stripePaymentIntentId String?
  releasedAt            DateTime?
  releasedToId          String?
  refundedAt            DateTime?
  metadata              String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  bounty                Bounty?
  releasedTo            User?               @relation(fields: [releasedToId], references: [id])
  transactions          EscrowTransaction[]
  wager                 Wager?

  @@index([status])
}

model EscrowTransaction {
  id                  String        @id @default(cuid())
  escrowId            String
  userId              String
  type                String
  amount              Float
  status              String        @default("PENDING")
  stripeTransactionId String?
  description         String
  processedAt         DateTime?
  createdAt           DateTime      @default(now())
  user                User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  escrow              EscrowAccount @relation(fields: [escrowId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
}

model Bounty {
  id              String              @id @default(cuid())
  creatorId       String
  title           String
  description     String
  bountyAmount    Float
  targetMetric    String
  timeframe       String
  startDate       DateTime
  endDate         DateTime
  status          String              @default("OPEN")
  maxParticipants Int                 @default(1)
  isPublic        Boolean             @default(true)
  escrowId        String              @unique
  winnerId        String?
  settledAt       DateTime?
  leagueId        String?
  metadata        String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  league          League?             @relation(fields: [leagueId], references: [id])
  winner          User?               @relation("BountyWinner", fields: [winnerId], references: [id])
  escrow          EscrowAccount       @relation(fields: [escrowId], references: [id], onDelete: Cascade)
  creator         User                @relation("BountyCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  participants    BountyParticipant[]
  updates         BountyUpdate[]

  @@index([creatorId])
  @@index([status])
  @@index([bountyAmount])
}

model BountyParticipant {
  id            String   @id @default(cuid())
  bountyId      String
  participantId String
  stakeAmount   Float
  currentScore  Float    @default(0)
  joinedAt      DateTime @default(now())
  participant   User     @relation("BountyParticipant", fields: [participantId], references: [id], onDelete: Cascade)
  bounty        Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)

  @@unique([bountyId, participantId])
  @@index([participantId])
}

model WagerUpdate {
  id        String   @id @default(cuid())
  wagerId   String
  type      String
  message   String
  data      String?
  createdAt DateTime @default(now())
  wager     Wager    @relation(fields: [wagerId], references: [id], onDelete: Cascade)

  @@index([wagerId])
  @@index([type])
}

model BountyUpdate {
  id        String   @id @default(cuid())
  bountyId  String
  type      String
  message   String
  data      String?
  createdAt DateTime @default(now())
  bounty    Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)

  @@index([bountyId])
  @@index([type])
}

model UserWallet {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  balance                Float    @default(0)
  lockedAmount           Float    @default(0)
  stripeCustomerId       String?
  defaultPaymentMethodId String?
  totalDeposited         Float    @default(0)
  totalWithdrawn         Float    @default(0)
  totalWon               Float    @default(0)
  totalLost              Float    @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ValueSnapshot {
  id         String   @id @default(cuid())
  playerId   String
  stockPrice Float
  timestamp  DateTime @default(now())
  wagerId    String?
  metadata   String?
  player     Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId])
  @@index([timestamp])
}

model Contest {
  id             String          @id @default(cuid())
  name           String
  description    String
  sport          String          @default("FOOTBALL")
  contestType    String
  entryFee       Float
  totalPrizePool Float
  maxEntries     Int
  currentEntries Int             @default(0)
  salaryCap      Float           @default(50000)
  startTime      DateTime
  endTime        DateTime
  status         String          @default("UPCOMING")
  isPublic       Boolean         @default(true)
  isGuaranteed   Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  entries        ContestEntry[]
  results        ContestResult[]
  dfsLineups     DFSLineup[]
  dfsPlayers     DFSPlayer[]

  @@index([sport])
  @@index([contestType])
  @@index([status])
  @@index([startTime])
}

model ContestEntry {
  id          String          @id @default(cuid())
  contestId   String
  userId      String
  lineupId    String          @unique
  entryNumber Int
  totalPoints Float           @default(0)
  rank        Int?
  payout      Float           @default(0)
  createdAt   DateTime        @default(now())
  lineup      DFSLineup       @relation(fields: [lineupId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest     Contest         @relation(fields: [contestId], references: [id], onDelete: Cascade)
  results     ContestResult[]

  @@unique([contestId, userId, entryNumber])
  @@index([contestId])
  @@index([userId])
  @@index([totalPoints])
}

model DFSLineup {
  id          String            @id @default(cuid())
  userId      String
  contestId   String
  name        String
  totalSalary Float
  totalPoints Float             @default(0)
  isOptimal   Boolean           @default(false)
  isLocked    Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  entry       ContestEntry?
  contest     Contest           @relation(fields: [contestId], references: [id], onDelete: Cascade)
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  players     DFSLineupPlayer[]

  @@index([userId])
  @@index([contestId])
  @@index([totalPoints])
}

model DFSLineupPlayer {
  id           String    @id @default(cuid())
  lineupId     String
  dfsPlayerId  String
  position     String
  slotPosition String
  salary       Float
  points       Float     @default(0)
  dfsPlayer    DFSPlayer @relation(fields: [dfsPlayerId], references: [id], onDelete: Cascade)
  lineup       DFSLineup @relation(fields: [lineupId], references: [id], onDelete: Cascade)

  @@unique([lineupId, slotPosition])
  @@index([lineupId])
  @@index([dfsPlayerId])
}

model DFSPlayer {
  id               String            @id @default(cuid())
  contestId        String
  externalPlayerId String
  name             String
  team             String
  position         String
  salary           Float
  projectedPoints  Float
  actualPoints     Float             @default(0)
  ownership        Float             @default(0)
  value            Float             @default(0)
  gameTime         DateTime?
  isActive         Boolean           @default(true)
  injuryStatus     String?
  lineupPlayers    DFSLineupPlayer[]
  contest          Contest           @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([contestId, externalPlayerId])
  @@index([contestId])
  @@index([position])
  @@index([salary])
  @@index([projectedPoints])
}

model ContestResult {
  id          String       @id @default(cuid())
  contestId   String
  userId      String
  entryId     String
  finalRank   Int
  finalPoints Float
  payout      Float
  createdAt   DateTime     @default(now())
  entry       ContestEntry @relation(fields: [entryId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  contest     Contest      @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@unique([contestId, entryId])
  @@index([contestId])
  @@index([userId])
  @@index([finalRank])
}

model Draft {
  id              String             @id @default(cuid())
  creatorId       String
  leagueId        String?
  name            String
  description     String?
  sport           String             @default("FOOTBALL")
  draftType       String
  draftOrder      String             @default("STANDARD")
  totalRounds     Int                @default(15)
  timePerPick     Int                @default(90)
  isAuction       Boolean            @default(false)
  auctionBudget   Float?
  isSnakeDraft    Boolean            @default(true)
  isMockDraft     Boolean            @default(false)
  isPublic        Boolean            @default(true)
  maxParticipants Int                @default(12)
  scheduledStart  DateTime?
  actualStart     DateTime?
  endedAt         DateTime?
  status          String             @default("SCHEDULED")
  currentRound    Int                @default(1)
  currentPick     Int                @default(1)
  currentPickerId String?
  settings        String             @default("{}")
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  league          League?            @relation(fields: [leagueId], references: [id])
  creator         User               @relation("DraftCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  board           DraftBoard?
  participants    DraftParticipant[]
  picks           DraftPick[]
  messages        Message[]

  @@index([sport])
  @@index([draftType])
  @@index([status])
  @@index([scheduledStart])
}

model DraftParticipant {
  id            String      @id @default(cuid())
  draftId       String
  userId        String
  draftPosition Int
  teamName      String?
  isReady       Boolean     @default(false)
  isAutoPick    Boolean     @default(false)
  timeouts      Int         @default(3)
  totalSpent    Float       @default(0)
  joinedAt      DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  draft         Draft       @relation(fields: [draftId], references: [id], onDelete: Cascade)
  picks         DraftPick[]

  @@unique([draftId, userId])
  @@unique([draftId, draftPosition])
  @@index([draftId])
  @@index([userId])
}

model DraftPick {
  id             String           @id @default(cuid())
  draftId        String
  participantId  String
  userId         String
  playerId       String
  playerName     String
  playerPosition String
  playerTeam     String
  round          Int
  pick           Int
  pickInRound    Int
  auctionPrice   Float?
  isKeeper       Boolean          @default(false)
  pickTime       DateTime         @default(now())
  timeToMake     Int?
  isAutoPick     Boolean          @default(false)
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  participant    DraftParticipant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  draft          Draft            @relation(fields: [draftId], references: [id], onDelete: Cascade)

  @@unique([draftId, round, pickInRound])
  @@index([draftId])
  @@index([participantId])
  @@index([userId])
}

model DraftBoard {
  id               String   @id @default(cuid())
  draftId          String   @unique
  availablePlayers String
  rankings         String
  adp              String
  projections      String
  lastUpdated      DateTime @default(now())
  draft            Draft    @relation(fields: [draftId], references: [id], onDelete: Cascade)

  @@index([draftId])
}

model MockDraft {
  id           String   @id @default(cuid())
  userId       String
  sport        String   @default("FOOTBALL")
  draftType    String
  teamCount    Int      @default(12)
  rounds       Int      @default(15)
  userPosition Int
  results      String
  userTeam     String
  aiAnalysis   String?
  score        Float?
  completedAt  DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sport])
}

model Message {
  id          String     @id @default(cuid())
  senderId    String
  recipientId String?
  leagueId    String?
  draftId     String?
  messageType String     @default("TEXT")
  content     String
  attachments String?
  isEdited    Boolean    @default(false)
  editedAt    DateTime?
  isDeleted   Boolean    @default(false)
  deletedAt   DateTime?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Message?   @relation("MessageReplies", fields: [parentId], references: [id])
  replies     Message[]  @relation("MessageReplies")
  draft       Draft?     @relation(fields: [draftId], references: [id], onDelete: Cascade)
  league      League?    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  recipient   User?      @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  sender      User       @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  reactions   Reaction[]

  @@index([leagueId])
  @@index([draftId])
  @@index([senderId])
  @@index([createdAt])
}

model ActivityItem {
  id           String     @id @default(cuid())
  userId       String
  leagueId     String?
  activityType String
  title        String
  description  String
  metadata     String?
  isPublic     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  league       League?    @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions    Reaction[]

  @@index([userId])
  @@index([leagueId])
  @@index([activityType])
  @@index([createdAt])
}

model Reaction {
  id           String        @id @default(cuid())
  userId       String
  messageId    String?
  activityId   String?
  reactionType String
  createdAt    DateTime      @default(now())
  activity     ActivityItem? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  message      Message?      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, messageId, reactionType])
  @@unique([userId, activityId, reactionType])
  @@index([messageId])
  @@index([activityId])
}

model Friendship {
  id          String   @id @default(cuid())
  initiatorId String
  recipientId String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipient   User     @relation("FriendshipRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  initiator   User     @relation("FriendshipInitiator", fields: [initiatorId], references: [id], onDelete: Cascade)

  @@unique([initiatorId, recipientId])
  @@index([initiatorId])
  @@index([recipientId])
  @@index([status])
}

model Notification {
  id               String    @id @default(cuid())
  userId           String
  notificationType String
  title            String
  message          String
  data             String?
  isRead           Boolean   @default(false)
  readAt           DateTime?
  createdAt        DateTime  @default(now())
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
}

model BettingOdds {
  id                String             @id @default(cuid())
  playerId          String
  gameId            String
  propType          String
  propName          String
  line              Float
  overOdds          Int
  underOdds         Int
  sportsbook        String
  volume            Int                @default(0)
  isLive            Boolean            @default(true)
  confidence        Float              @default(50)
  createdAt         DateTime           @default(now())
  lastUpdated       DateTime           @updatedAt
  player            Player             @relation("PlayerBettingOdds", fields: [playerId], references: [id], onDelete: Cascade)
  bettingSelections BettingSelection[]
  oddsMovements     OddsMovement[]

  @@index([playerId])
  @@index([gameId])
  @@index([propType])
  @@index([isLive])
}

model BettingSlip {
  id              String             @id @default(cuid())
  userId          String
  totalOdds       Float
  potentialPayout Float
  stake           Float
  status          String             @default("PENDING")
  placedAt        DateTime           @default(now())
  settledAt       DateTime?
  actualPayout    Float?
  selections      BettingSelection[]
  user            User               @relation("UserBettingSlips", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([placedAt])
}

model BettingSelection {
  id              String      @id @default(cuid())
  bettingSlipId   String
  oddsId          String
  selection       String
  line            Float
  oddsValue       Int
  stake           Float
  potentialPayout Float
  isWon           Boolean?
  actualResult    Float?
  odds            BettingOdds @relation(fields: [oddsId], references: [id], onDelete: Cascade)
  bettingSlip     BettingSlip @relation(fields: [bettingSlipId], references: [id], onDelete: Cascade)

  @@index([bettingSlipId])
  @@index([oddsId])
}

model OddsMovement {
  id                String      @id @default(cuid())
  oddsId            String
  previousLine      Float
  newLine           Float
  previousOverOdds  Int
  newOverOdds       Int
  previousUnderOdds Int
  newUnderOdds      Int
  movement          Float
  trigger           String
  timestamp         DateTime    @default(now())
  odds              BettingOdds @relation(fields: [oddsId], references: [id], onDelete: Cascade)

  @@index([oddsId])
  @@index([timestamp])
}

model PlayerPropHistory {
  id           String   @id @default(cuid())
  playerId     String
  gameId       String
  propType     String
  line         Float
  actualResult Float
  hit          Boolean
  gameDate     DateTime
  opponent     String
  player       Player   @relation("PlayerPropHistory", fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId])
  @@index([propType])
  @@index([gameDate])
}

model BettingInsight {
  id             String   @id @default(cuid())
  playerId       String
  propType       String
  recommendation String
  confidence     Float
  reasoning      String
  keyFactors     String
  generatedAt    DateTime @default(now())
  expiresAt      DateTime
  player         Player   @relation("PlayerBettingInsights", fields: [playerId], references: [id], onDelete: Cascade)

  @@index([playerId])
  @@index([propType])
  @@index([confidence])
  @@index([expiresAt])
}

// ============================================
// DATA COLLECTION & PROCESSING TABLES
// ============================================

model DataCollectionRun {
  id            String        @id @default(cuid())
  source        String        // ESPN API, Yahoo Fantasy, etc.
  dataType      String        // api, news, official
  startTime     DateTime      @default(now())
  endTime       DateTime?
  recordsCount  Int           @default(0)
  status        String        @default("RUNNING") // RUNNING, COMPLETED, FAILED
  error         String?
  createdAt     DateTime      @default(now())
  rawDataItems  RawDataCache[]

  @@index([source])
  @@index([dataType])
  @@index([status])
  @@index([createdAt])
}

model RawDataCache {
  id               String            @id @default(cuid())
  collectionRunId  String
  source           String
  dataType         String
  url              String?
  rawData          String            // JSON blob of actual data
  recordCount      Int               @default(0)
  isProcessed      Boolean           @default(false)
  processedAt      DateTime?
  createdAt        DateTime          @default(now())
  collectionRun    DataCollectionRun @relation(fields: [collectionRunId], references: [id], onDelete: Cascade)
  processingLogs   ProcessingLog[]

  @@index([collectionRunId])
  @@index([source])
  @@index([isProcessed])
  @@index([createdAt])
}

model ProcessingLog {
  id            String       @id @default(cuid())
  rawDataId     String
  processType   String       // PLAYER_STATS, NEWS_ARTICLES, GAME_DATA, etc.
  recordsProcessed Int       @default(0)
  recordsFailed    Int       @default(0)
  status        String       @default("PROCESSING") // PROCESSING, COMPLETED, FAILED
  error         String?
  startTime     DateTime     @default(now())
  endTime       DateTime?
  rawData       RawDataCache @relation(fields: [rawDataId], references: [id], onDelete: Cascade)

  @@index([rawDataId])
  @@index([processType])
  @@index([status])
}

model NewsArticle {
  id           String   @id @default(cuid())
  source       String   // ESPN, CBS Sports, etc.
  title        String
  content      String
  summary      String?
  url          String   @unique
  author       String?
  publishedAt  DateTime
  sport        String?
  teams        String?  // JSON array of team names
  players      String?  // JSON array of player names
  sentiment    Float?   // -1 to 1 sentiment score
  category     String?  // injury, trade, game recap, etc.
  imageUrl     String?
  isProcessed  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([source])
  @@index([sport])
  @@index([publishedAt])
  @@index([isProcessed])
}

model GameData {
  id           String   @id @default(cuid())
  externalId   String   @unique
  sport        String
  homeTeam     String
  awayTeam     String
  gameTime     DateTime
  venue        String?
  weather      String?  // JSON object with weather data
  homeScore    Int?
  awayScore    Int?
  status       String   // SCHEDULED, IN_PROGRESS, FINAL
  quarter      Int?
  timeLeft     String?
  lastPlay     String?
  scoringPlays String?  // JSON array
  statistics   String?  // JSON object with game stats
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([sport])
  @@index([gameTime])
  @@index([status])
  @@index([homeTeam])
  @@index([awayTeam])
}
